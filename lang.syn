program                         prg -> decl+;

function declaration            decl -> type identifier(|type identifier|? |, type identifier|*);                   fundecl
function declaration            decl -> type identifier(|type identifier|? |, type identifier|*) compstmt           fundecl
variable declaration            decl -> type identifier (= expr)?;                                                  vardecl
type declaration                decl -> typedef type identifier;                                                    typedecl
struct declaration              decl -> struct identifier { |vardecl;|* }                                           structdecl

pointer type                    type -> type*                                                                       ptrtype
atomic type                     type -> void | char | int | bool | float                                            atomtype
named type                      type -> identifier                                                                  namedtype
array type                      type -> type[expr]                                                                  arrtype

infix expression                expr -> A A'        A' -> (&&  ||) A A' | empty
                                   A -> B B'        B' -> (&  |  ^) B B' | empty
                                   B -> C C'        C' -> (==  !=  <  >  <=  >=) C C' | empty
                                   C -> D D'        D' -> (+  -) D D' | empty
                                   D -> E E'        E' -> (*  /  %) E E' | empty
prefix expression                  E -> (++  --  +  -  !  *  &  ~  (type)) E | F
postfix expression                 F -> G G'        G' -> (++  --  [expr]  .identifier  ->identifer) G' | empty
                                   G -> (const  ident  funcall (expr))
function call                   expr -> identifier( |expr|? |, expr|* )
const expression                expr -> const
variable access                 expr -> identifier
new expression                  expr -> new type
delete expression               expr -> delete identifier

expression statement            stmt -> expr;
assignment statement            stmt -> expr (=  +=  -=  *=  /=  %=) expr;
compound statement              stmt -> { |stmt|* }
conditional statement           stmt -> if (expr) stmt (else stmt)?
while statement                 stmt -> while (expr) stmt
return statement                stmt -> return expr?;
vardecl statement               stmt -> vardecl;
fundecl statement               stmt -> fundecl;
